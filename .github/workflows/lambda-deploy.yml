name: Deploy Lambda Function

on:
  push:
    branches:
      - master # Trigger on push to the main branch

jobs:
  build:
    name: Build Lambda ZIP
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Install dependencies
        run: |
          cd lambda_function
          npm install

      - name: Create lambda.zip
        run: |
          cd lambda_function
          zip -r ../lambda.zip .

  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: dev # Directly specifying the environment as 'dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.4.5"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform init
        run: |
          cd infrastructure
          terraform init -backend-config=environments/dev/backend-config.hcl

      - name: Terraform plan
        env:
          TF_VAR_lambda_name: "hello-world"
          TF_VAR_handler: "index.handler"
          TF_VAR_runtime: "nodejs14.x"
          TF_VAR_environment: "dev"
          TF_VAR_lambda_zip_file: "lambda.zip"
          TF_VAR_rest_api_name: "dev-api-gateway"
        run: |
          cd infrastructure
          terraform plan

      - name: Terraform apply
        env:
          TF_VAR_lambda_name: "hello-world"
          TF_VAR_handler: "index.handler"
          TF_VAR_runtime: "nodejs14.x"
          TF_VAR_environment: "dev"
          TF_VAR_lambda_zip_file: "lambda.zip"
          TF_VAR_rest_api_name: "dev-api-gateway"
        run: |
          cd infrastructure
          terraform apply -auto-approve

  notify:
    name: Notify success/failure
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Notify success/failure status
        run: echo "Lambda deployment to ${{ job.environment }} environment completed successfully."
